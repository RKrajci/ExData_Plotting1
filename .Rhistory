ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
library(datasets)
data(iris)
?iris
tapply(iris$Sepal.Length,iris$Species,mean)
?apply
head(iris)
apply(iris[,1:4],2,mean)
library(datasets)
data("mtcars")
?mtcars
?mean
tapply(mtcars$mpg,mtcars$cyl,mean)
?sapply
sapply(split(mtcars$mpg,mtcars$cyl),mean)
with(mtcars,tapply(mpg,cyl,mean)
with(mtcars,tapply(mpg,cyl,mean))
mean(mtcars$mpg,mtcars$cyl)
apply(mtcars,2,mean)
?abs
abs(sapply(split(mtcars$mpg,mtcars$cyl[==4]),mean)[1]-sapply(split(mtcars$mpg,mtcars$cyl[==8]),mean))
clear()
tapply(mtcars$mpg, mtcars$cyl, mean)
mean_cyl<-tapply(mtcars$mpg, mtcars$cyl, mean)
mean_cyl[,"4"]
mean_cyl["4"]
abs(mean_cyl["4"]-mean_cyl["8"])
26.66364-15.1
debug(ls)
ls()
0
q
c
Q
exit
q
Q
library(swirl)
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",method="curl",destfile="QuizFile1")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile="QuizFile1")
ls()
dir()
read.csv("QuizFile1")
data1<-read.csv("QuizFile1")
sum(data1$VAL[==24])
sum(data1$VAL[data1$VAL==24])
sum(data1$VAL[data1$VAL==24&is.na(data11$VAL=FALSE)])
sum(data1$VAL[data1$VAL==24&is.na(data11$VAL==FALSE)])
sum(data1$VAL[data1$VAL==24&is.na(data1$VAL==FALSE)])
data1$VAL[data1$VAL==24&is.na(data1$VAL==FALSE)]
head(data1$VAL)
head(is.na(data1$VAL))
data1$VAL[==24]
data1$VAL[24]
max(data1$VAL)
sum(data1$VAL[data1$VAL==24&is.na(data1$VAL)==FALSE])
head(data1$VAL[data1$VAL==24&is.na(data1$VAL)==FALSE])
nrow(data1$VAL[data1$VAL==24&is.na(data1$VAL)==FALSE])
NROW(data1$VAL[data1$VAL==24&is.na(data1$VAL)==FALSE])
library(xlsx)
library("xlsx")
install.packages("xlsx")
library(xlsx)
version
library(xlsx)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",destfile="QuizFile2")
dat<-read.xlsx("QuizFile2",rowIndex = 18:23,colIndex = 7:15,sheetIndex = 1)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",destfile="QuizFile2",mode="wb")
dat<-read.xlsx("QuizFile2",rowIndex = 18:23,colIndex = 7:15,sheetIndex = 1)
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages("XML")
library(XML)
doc<-xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",useInternalNodes = TRUE)
install.packages(RCurl)
install.packages("RCurl")
library(RCurl)
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData<-getURL(fileURL)
xData<-getURL(fileURL,ssl.verifypeer=FALSE)
doc<-xmlParse(xData)
rootNode<-xmlRoot(doc)
xmlName(rootNode)
rootNode
rootNode[@zipcode="21231"]
rootNode[[1]]
rootNode//row[@zipcode="21231"]
q4node<-xmltoDataFrame(getnodeset(doc,"//zipcode"))
q4node<-xmlToDataFrame(getNodeSet(doc,"//zipcode"))
head(q4node)
sum(q4node[q4node==21231])
sum(q4node[q4node=="21231"])
nrow(q4node[q4node=="21231"])
NROW(q4node[q4node=="21231"])
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv",destfile="QuizFile3")
DT<-fread("QuizFile3")
install.packages("data.table")
library(data.table)
DT<-fread("Quizfile3")
pwgtp15
test_1<-mean(DT$pwgtp15,by=DT$SEX)
test_2<-rowMeans(DT)[DT$SEX==1];rowMeans(DT)[DT$SEX==2]
test_2
system.time(test_1)
system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(DT[,mean(pwgtp15),by=SEX])
library(swirl)
swirl()
remove.package("yaml")
remove.packages("yaml")
install.packages("devtools")
library(devtools)
has_devel()
install_version("yaml",version="2.1.16")
library(swirl)
swirl()
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran.-time)
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country=="US"|country=="IN")
filter(cran,size>100500,r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res<-gather(students2,sex_class,count)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,c("sex","class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
?mutate
submit()
submit()
?parse_number
?mutate
submit()
students4
students4
submit()
submit()
submit()
passed
failed
Overwrite<-mutate(passed,status="passed")
passed<-passed %>% mutate(status="passed")
failed<-failed %>% mutate(status="failed")
bind_rows(passed,failed)
sat
?select
?separate
submit()
submit()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile="Survey.csv",method="curl")
survey<-read.csv("Survey.csv")
survey[which(survey$ACR==3&AGS==6),]
survey[which(survey$ACR==3&survey$AGS==6),]
head(survey[which(survey$ACR==3&survey$AGS==6),])
install.packages("jpeg")
library(jpeg)
pic<-readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",native=TRUE)
?readJPEG
?download.file
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",destfile="pic.jpeg",method="curl")
pic<-readJPEG("pic.jpeg",native=TRUE)
?quantile
quantile(pic,probs=c(0.3,0.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",destfile="GDP.csv",method="curl")
GDP<-read.csv("GDP.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",destfile="education.csv",method="curl")
education<-read.csv("education.csv")
GDP$CountryCode<-rownames(GDP)
library(dplyr)
merged<-merge(GDP,education,by.x="CountryCode",by.y="CountryCode",all=TRUE)
head(merged)
names(GDP)
head(GDP)
GDP<-read.csv("GDP.csv")
head(GDP)
?read.csv
GDP<-read.csv("GDP.csv",skip=4,blank.lines.skip = TRUE)
head(GDP)
GDP<-read.csv("GDP.csv",skip=2,blank.lines.skip = TRUE)
head(GDP)
GDP_Lines<-readLines("GDP.csv")
skip_second<-GDP_Lines[-2]
GDP<-read.csv(textConnection(skip_second),header=T,stringsAsFactors = FALSE)
head(GDP)
skip_second<-skip_second[-1]
skip_second<-skip_second[-2]
GDP<-read.csv(textConnection(skip_second),header=T,stringsAsFactors = FALSE)
head(GDP)
skip_second<-GDP_Lines[-2]
skip_second<-skip_second[-1]
head(skip_second)
GDP_header<-GDP_Lines[2]
GDP_header<-GDP_Lines[3]
GDP_header<-GDP_Lines[5]
GDP_header<-GDP_Lines[4]
GDP<-read.csv("GDP.csv",skip=4,col.names = GDP_header)
GDP_header[1]
GDP_header
vector(GDP_header)
GDP<-read.csv("GDP.csv",skip=2)
head(GDP)
GDP_header<-GDP[1,]
GDP_header
GDP_header<-character(GDP[1,])
GDP_header<-character(GDP[1,],length=4)
GDP_header<-character(GDP[1,1],GDP[1,2],GDP[1,3],GDP[1,4])
GDP_header<-c(GDP[1,1],GDP[1,2],GDP[1,3],GDP[1,4])
GDP_header
GDP_header<-GDP[1,]
GDP[1,1]
GDP[1,]
GDP[1,1]<-"CountryCode"
GDP[1,][1]<-"CountryCode"
c(GDP[1,1],GDP[1,2])
c(GDP[1,][1],GDP[1,][2])
GDP[1,2]
GDP[,1]
GDP_header<-readLines(GDP,n=1)
GDP_Lines<-readLines("GDP.csv")
skip_second<-GDP_Lines[-c(1,2,4)]
GDP<-read.csv(textConnection(skip_second),header=true,stringsAsFactors = FALSE)
GDP<-read.csv(textConnection(skip_second),header =TRUE,stringsAsFactors = FALSE)
head(GDP)
head(GDP_Lines)
skip_second<-GDP_Lines[-c(1,2,3,5)]
GDP<-read.csv(textConnection(skip_second),header =TRUE,stringsAsFactors = FALSE)
head(GDP)
skip_second<-GDP_Lines[-c(1,2,3,5),-c(3,6,7,8,9,10)]
head(education)
merged<-merge(GDP,education,by.x="X",by.y="CountryCode",all=TRUE)
head(merged)
tail(merged)
head(GDP)
GDP[,-3]
head(GDP[,-3])
GDP<-GDP[,-c(3,6,7,8,9,10)]
head(GDP)
head(GDP)
colnames(GDP)[colnames(GDP)=="X"]<-"CountryCode"
head(GDP)
?read.csv
GDP<-tbl_df(GDP)
intersect(names(GDP),names(education))
merged<-merge(GDP,education,all=TRUE)
head(merged)
merged<-merge(education,GDP,all=TRUE)
head(merged)
?nrow
summary(merged$Ranking)
str(merged$Ranking)
str(merged$Ranking[>0])
merged$Ranking[>0]
str(merged$Ranking[merged$Ranking>0])
unique(str(merged$Ranking[merged$Ranking>0]))
str(unique(merged$Ranking[merged$Ranking>0]))
GDP<-GDP[-(196:241)]
GDP<-GDP[-(196:241),]
tail(GDP)
head(GDP)
nrow(GDP)
GDP<-GDP[-(192:195),]
tail(GDP)
GDP
GDP<-GDP[-266,]
GDP
275-191
view(GDP)
View(GDP)
GDP<-GDP[-(191:275),]
tail(GDP)
merged<-merge(education,GDP,all=TRUE)
str(unique(merged$Ranking[merged$Ranking>0]))
arrange(merged,desc(Ranking))
head(arrange(merged,desc(Ranking))),n=15
head(arrange(merged,desc(Ranking))),n=15)
head(arrange(merged,desc(Ranking)),n=15)
max(merged$Ranking)
?arrange
merged<-tbl_df(merged)
head(arrange(merged,desc(Ranking)),n=15)
class(merged$Ranking,"integer")
as.integer(merged$Ranking)
merged$Ranking<-as.integer(merged$Ranking)
head(arrange(merged,desc(Ranking)),n=15)
merged_group<-group_by(merged,Income.Group)
merged_group
summarize(merged_group)
summarize(merged_group,AvgRank=ave(Ranking))
summarize(merged_group,ave(Ranking))
summarize(merged_group,mean(Ranking))
?summarize
summarize(merged_group,AvgRank=mean(Ranking,na.rm=TRUE))
merged$RankGroups<-cut(merged$Ranking,breaks=quantile(merged$Ranking,probs=c(0.2,0.4,0.6,0.8,1)))
merged$RankGroups<-cut(merged$Ranking,breaks=quantile(merged$Ranking,probs=c(0.2,0.4,0.6,0.8,1),na.rm=TRUE))
table(merged$RankGroups,merged$Income.Group)
table(merged$RankGroups,merged$Income.Group)
merged$RankGroups<-cut(merged$Ranking,breaks=quantile(merged$Ranking,probs=c(0,0.2,0.4,0.6,0.8,1),na.rm=TRUE))
table(merged$RankGroups,merged$Income.Group)
4+17+5+11
View(arrange(merged,desc(Ranking)))
merged$Ranking<-as.numeric(merged$Ranking)
View(arrange(merged,desc(Ranking)))
unique(merged$Ranking)
nrow(unique(merged$Ranking))
NROW(unique(merged$Ranking))
NROW(!is.na(unique(merged$Ranking)))
NROW(unique(merged$Ranking[!is.na(merged$Ranking)]))
library(POSIXt)
library(sqldf)
library(dplyr)
setwd
setwd("EData_Plotting1")
setwd("ExData_Plotting1")
text<-"household_power_consumption.txt"
file<-file(text)
data<-sqldf("select * from file where Date in ('01/02/2007'','02/02/2007')", file.format=list(header=TRUE, sep=";", na.strings="?"))
data<-sqldf("select * from file where Date in ('1/02/2007'','2/02/2007')", file.format=list(header=TRUE, sep=";", na.strings="?"))
data<-sqldf("select * from file where Date in ('01/02/2007','02/02/2007')", file.format=list(header=TRUE, sep=";", na.strings="?"))
head(data)
data<-sqldf("select * from file where Date in ('1/02/2007','2/02/2007')", file.format=list(header=TRUE, sep=";", na.strings="?"))
data<-sqldf("select * from file where Date in ('1/2/2007','2/2/2007')", file.format=list(header=TRUE, sep=";", na.strings="?"))
class(data)
head(data)
class(data$Date)
class(data$Time)
class(data$Global_active_power)
class(data$Global_reactive_power)
class(data$Voltage)
class(data$Global_intensity)
class(data$Sub_metering_1)
class(data$Sub_metering_2)
class(data$Sub_metering_3)
view(data)
View(data)
data$datetime<-as.POSIXct(paste(data$Date,data$Time),format="%Y-%m-%d %H:%M:%S")
head(data)
View(data)
data$Date<-as.Date(data$Date)
?as.Date
data<-sqldf("select * from file where Date in ('1/2/2007','2/2/2007')", file.format=list(header=TRUE, sep=";", na.strings="?"))
data$Date<-as.Date(data$Date,"%d/%m/%Y")
data$Time<-strptime(data$Time)
data$Time<-strptime(data$Time,"%H:%M:%S")
data<-sqldf("select * from file where Date in ('1/2/2007','2/2/2007')", file.format=list(header=TRUE, sep=";", na.strings="?"))
data$Date<-as.Date(data$Date,"%d/%m/%Y")
data$Time<-format(strptime(data$Time,"%H:%M:%S"),"%H:%M:%S")
data$datetime<-as.POSIXct(paste(data$Date,data$Time),format="%Y-%m-%d %H:%M:%S")
hist(data$Global_active_power,col="red",xlab="Global Active Power (kilwatts)",main="Global Active Power")
hist(data$Global_active_power,col="red",xlab="Global Active Power (kilowatts)",main="Global Active Power")
png(filename="plot1.png", width=480,height=480)
hist(data$Global_active_power,col="red",xlab="Global Active Power (kilowatts)",main="Global Active Power")
dev.off()
close(file)
plot(data$datetime,data$Global_active_power,type="l",xlab="",ylab="Global Active Power (kilowatts)")
png(filename="plot2.png",width=480,height=480)
plot(data$datetime,data$Global_active_power,type="l",xlab="",ylab="Global Active Power (kilowatts)")
dev.off()
plot(data$datetime,data$Sub_metering_1,type="n",ylab="Energy sub metering",xlab="")
lines(data$datetime,data$Sub_metering_1,col="black")
lines(data$datetime,data$Sub_metering_2,col="red")
lines(data$datetime,data$Sub_metering_3,col="blue")
legend("topright",lty=c(1,1,1),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),col=c("black","red","blue"))
png(filename="plot3.png",width=480,height=480)
plot(data$datetime,data$Sub_metering_1,type="n",ylab="Energy sub metering",xlab="")
lines(data$datetime,data$Sub_metering_1,col="black")
lines(data$datetime,data$Sub_metering_2,col="red")
lines(data$datetime,data$Sub_metering_3,col="blue")
legend("topright",lty=c(1,1,1),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),col=c("black","red","blue"))
dev.off()
par(mfrow=c(2.2))
par(mfrow=c(2,2))
with(data,{})
plot(data$datetime,data$Global_active_power,type="l",xlab="",ylab="Global Active Power (kilowatts)")
plot(data$datetime,data$Sub_metering_1,type="n",ylab="Energy sub metering",xlab="")
lines(data$datetime,data$Sub_metering_1,col="black")
lines(data$datetime,data$Sub_metering_2,col="red")
lines(data$datetime,data$Sub_metering_3,col="blue")
legend("topright",lty=c(1,1,1),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),col=c("black","red","blue"))
plot(data$datetime,data$Sub_metering_1,type="n",ylab="Energy sub metering",xlab="")
lines(data$datetime,data$Sub_metering_1,col="black")
lines(data$datetime,data$Sub_metering_2,col="red")
lines(data$datetime,data$Sub_metering_3,col="blue")
legend("topright",lty=c(1,1,1),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),col=c("black","red","blue"),bty="n")
par(mfrow=c(2,2))
plot(data$datetime,data$Global_active_power,type="l",xlab="",ylab="Global Active Power (kilowatts)")
plot(data$datetime,data$Voltage,type="l")
plot(data$datetime,data$Sub_metering_1,type="n",ylab="Energy sub metering",xlab="")
lines(data$datetime,data$Sub_metering_1,col="black")
lines(data$datetime,data$Sub_metering_2,col="red")
lines(data$datetime,data$Sub_metering_3,col="blue")
legend("topright",lty=c(1,1,1),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),col=c("black","red","blue"),bty="n")
plot(data$datetime,data$Global_reactive_power,type="l",xlab=names(data$datetime),ylab=names(data$Global_reactive_power))
png(filename="plot4.png",width=480,height=480)
par(mfrow=c(2,2))
plot(data$datetime,data$Global_active_power,type="l",xlab="",ylab="Global Active Power (kilowatts)")
plot(data$datetime,data$Voltage,type="l",xlab="datetime",ylab="Voltage")
plot(data$datetime,data$Sub_metering_1,type="n",ylab="Energy sub metering",xlab="")
lines(data$datetime,data$Sub_metering_1,col="black")
lines(data$datetime,data$Sub_metering_2,col="red")
lines(data$datetime,data$Sub_metering_3,col="blue")
legend("topright",lty=c(1,1,1),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),col=c("black","red","blue"),bty="n")
plot(data$datetime,data$Global_reactive_power,type="l",xlab="datetime",ylab="Global_reactive_power")
dev.off()
clear()
clear
library(sqldf)
text<-"household_power_consumption.txt"
file<-file(text)
data<-sqldf("select * from file where Date in ('1/2/2007','2/2/2007')", file.format=list(header=TRUE, sep=";", na.strings="?"))
close(file)
data$datetime<-as.POSIXct(paste(as.Date(data$Date,"%d/%m/%Y"),format(strptime(data$Time,"%H:%M:%S"),"%H:%M:%S")),format="%Y-%m-%d %H:%M:%S")
png(filename="plot1.png", width=480,height=480)
hist(data$Global_active_power,col="red",xlab="Global Active Power (kilowatts)",main="Global Active Power")
dev.off()
